// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        # 扩散颜色
        spotColor: {
          value: [1.0, 1.0, 1.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "扩散颜色"
          } 
        }

        # 扩散坐标
        spot: {
          value: [0.5, 0.5],
          editor: {
            tooltip: "扩散坐标" 
          }
        }

        # 扩散半径
        radius: {
          value: 0.2,
          editor: {
            tooltip: "扩散半径"
          }
        }

        # 是否启用迷雾效果
        enableFog: {
          value: 0.0,
          editor: {
            tooltip: "是否启用迷雾效果(0:不启用 非0:启用)"
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if ENABLE_DIFFUSION
  uniform Diffusion {
    // 扩散颜色
    vec4 spotColor;
    // 扩散坐标
    vec2 spot;
    // 扩展半径
    float radius; 
    // 是否启用迷雾效果
    // ps: 编辑器还不支持 bool 类型, 因此用float来定义
    float enableFog;
  };

  // 判断点是否在椭圆内部
  float isInOval(vec2 spot) {
    float a = radius;
    float b = radius * 1280. / 720.;
    vec2 uv = v_uv0.xy;
    float v = pow(spot.x - uv.x, 2.) / pow(a, 2.) + pow(spot.y - uv.y, 2.) / pow(b, 2.);
    if (v <= 1.) {
      return v;
    } else {
      return 0.0;
    }
  }

  // 添加某个扩散点混合后的纹理颜色
  vec4 addLightColor(vec4 color, vec2 spot, float radius, vec4 spotColor) {

    // 计算当前 uv 到圆心起点的距离
    float dis = distance(v_uv0, spot);

    float a = 1.0;

    // 裁剪掉透明区域上的点光
    // step(edge, x) 如果 x < edge, 返回 0.0, 否则返回 1.0
    if (bool(1.0)) {
      a *= step(0.01, color.a);
    }

    // 圆形
    if (dis <= radius) {
      // 中心往外渐变
      a *= 1.0 - (dis / radius);
    } else {
      a = 0.0;
    }

    // 椭圆形
    // float v = isInOval(spot);
    // if(bool(v)) {
    //   a *= 1.0 - (v / 1.0);
    // } else {
    //   a = 0.0;
    // }

    spotColor = spotColor * a;
    if (bool(enableFog)) color = vec4(color.rgb, a);

    return color + spotColor;
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;

    #if ENABLE_DIFFUSION
      gl_FragColor = addLightColor(gl_FragColor, spot, radius, spotColor);
    #endif
  }
}%
