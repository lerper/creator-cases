// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        # 图片分辨率
        iResolution: {
          value: [1280., 720.], 
          editor: { 
            tooltip: "图片分辨率"
          } 
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #define F cos(x-y)*cos(y),sin(x+y)*sin(y)
  
  #include <alpha-test>
  #include <cc-global>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if ENABLE_WAVE
  uniform Water {
    // 图片分辨率
    vec2 iResolution;
  };

  vec2 s(vec2 p)
  {
      float d = cc_time.x * 0.4, x = 8. * (p.x + d), y = 8.*(p.y + d);
      return vec2(F);
  }
  void mainImage(out vec4 fragColor, in vec2 fragCoord ) {
      // 换成 resolution
      vec2 rs = iResolution.xy;
      // 换成纹理坐标 v_texCoord.xy
      vec2 uv = fragCoord;
      vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));
      // 反转 y
      // q.y = 1. - q.y;
      fragColor = texture2D(texture, q);
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;

    #if ENABLE_WAVE
      mainImage(gl_FragColor, v_uv0.xy);
    #endif
  }
}%
