// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  
// 高斯模糊
// 参考资料
// http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        blurDensity: {
          value: [100.0, 100.0],
          editor: {
            tooltip: '模糊精度, 越小越模糊'
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if ENABLE_GAUSSIANBLUR
    // 定义无理数和π
    #define e 2.718281828459045
    #define pi 3.141592653589793
    // 定义标准方差值 (方差值越大, 越模糊, 但是需要计算的高斯矩阵范围会变大, 从而带来巨大的计算量)
    // #define stDev 0.84089642
    #define stDev 1.5
    // #define stDev 5.0
    // #define stDev 10.0
    uniform GaussianBlur{
      vec2 blurDensity;
    };

    /*
     * 获取权重 (对应二维高斯函数公式)
     */
    float getWeight(float x, float y) {
      return (1.0 / (2.0 * pi * pow(stDev, 2.0))) * pow(1.0 / e, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(stDev, 2.0)));
    }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
    #if ENABLE_GAUSSIANBLUR
      //矩阵5*5
      const float size = floor(stDev * 6.0 + 1.0);
      const float halfSize = floor(size / 2.0);

      // v2: 因为高斯分布是对称的, 所以只计算原点、X轴正方向 * 2、Y轴正方向 * 2、第一象限的权重 * 4即可求出所有权重之和, 相比起v1版本, 减少很多循环计算

      // 原点
      float totalWeight = getWeight(0.0, 0.0);

      // X轴正方向上的权重 * 2.0 就是整个X轴上的权重
      for(float x = 1.0; x <= halfSize; x++) {
          totalWeight += getWeight(x, 0.0) * 2.0;
      } 
      // Y轴正方向上的权重 * 2.0 就是整个Y轴上的权重
      for(float y = 1.0; y <= halfSize; y++) {
          totalWeight += getWeight(0.0, y) * 2.0;
      } 
      // 第一象限的权重 * 4.0 就是4个象限的权重
      for(float x = 1.0; x <= halfSize; x++) {
        for (float y = 1.0; y<= halfSize; y++) {
          totalWeight += getWeight(x, y) * 4.0;
        }
      }

      // 步骤二: 采样周边像素并应用加权平均值, 得出最终像素值
      vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);
      // float divider = 0.01; 
      float onePxWidth = 1.0 / blurDensity.x;
      float onePxHeight = 1.0 / blurDensity.y;
      for(float x = -halfSize; x<= halfSize; x++) {
        for (float y = -halfSize; y<= halfSize; y++) {
          // 求出对应坐标的真正权重(对应权重矩阵)
          float weight = getWeight(x, y) / totalWeight;

          // 求出对应坐标像素颜色值的加权值
          finalColor += texture(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;
        }
      }
      gl_FragColor = finalColor;
    #endif
  }
}%
