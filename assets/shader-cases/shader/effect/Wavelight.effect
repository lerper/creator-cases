// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        # 波光颜色
        lightColor: {
          value: [1.0, 1.0, 1.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "波光颜色"
          } 
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #define TAU 6.12
  #define MAX_ITER 5
  
  #include <alpha-test>
  #include <cc-global>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if ENABLE_WAVELIGHT
  uniform Wavelight {
    // 波光颜色
    vec4 lightColor;
  };

  // 添加波光
  vec4 addLightColor(vec4 lightColor) {
    //内置变量 cc_time.x: 游戏运行事件 (秒), 需要 #include <cc-global>
    float timers = cc_time.x * .5 + 5.;

    vec2 uv = v_uv0.xy;
    vec2 p = mod(uv * TAU, TAU) - 250.0;
    vec2 i = vec2(p);
    float c = 1.0;
    float inten = .0045;
    for (int n = 0; n < MAX_ITER; n++) 
    {
        float t =  timers * (1.0 - (3.5 / float(n + 1)));
        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));
        c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));
    }
    c /= float(MAX_ITER);
    c = 1.17 - pow(c, 1.4);
    vec4 tex = texture2D(texture, uv);
    vec3 colour = vec3(pow(abs(c), 20.0));
    colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);
    float alpha = c * tex[3];  
    tex[0] = tex[0] + colour[0] * alpha; 
    tex[1] = tex[1] + colour[1] * alpha; 
    tex[2] = tex[2] + colour[2] * alpha;

    return lightColor * tex;
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;

    #if ENABLE_WAVELIGHT
      gl_FragColor = addLightColor(lightColor);
    #endif
  }
}%
