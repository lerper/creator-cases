{
  "ver": "1.0.25",
  "uuid": "9652c08f-6ffc-4c8e-a0ca-c8d25acf74c8",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nfloat time = cc_time.x;\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\nvec2 pmod(vec2 p, float n){\n  float np = 3.1415*2./n;\n  float r = atan(p.y,p.x)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n}\nfloat cube(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n}\nfloat crossBox(vec3 p,float s){\n  float m1 = cube(p,vec3(s,s,99999.));\n  float m2 = cube(p,vec3(99999.,s,s));\n  float m3 = cube(p,vec3(s,99999.,s));\n  return min(min(m1,m2),m3);\n}\nfloat dist(vec3 p){\n  p.xy *= rot(time*0.2);\n  p.z += time;\n  p.xy = pmod(p.xy,6.);\n  for(int i  =0;i<4;i++){\n    p = abs(p)-1.;\n    p.xz *= rot(0.3);\n  }\n  float k = 0.6;\n  p = mod(p,k)-0.5*k;\n  return min(crossBox(p,0.02),cube(p,vec3(0.1)));\n}\nvoid main () {\n  vec2 p = ( gl_FragCoord.xy / resolution.xy );\np = (p-0.5)*2.;\np.x *= resolution.x/resolution.y;\np *= rot(time*0.0);\nvec3 ro = vec3(cos(time/2.),0.7,0.7);\nvec3 rd = normalize(vec3(p,0.)-ro);\nfloat d,t=2.;\nfloat ac = 0.;\nfor(int i = 0;i<50;i++){\n  d = dist(ro+rd*t);\n  t += d;\n  ac += exp(-4.0*d);\n  if(d<0.01) break;\n}\nfloat cl = exp(-1.0*t);\nvec3 col = vec3(0.7,0.7,0.2)*0.05*vec3(ac);\ncol += vec3(0,0.3,0.3);\ncol = pow(col,vec3(0.7));\nif(d<0.01) col +=vec3(0.4,0.8,0.9)*0.01/abs(mod((ro+rd*t).z,1.0)-0.5);\ngl_FragColor = vec4(col, 1.0 );\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  vec2 resolution;\n};\nfloat time = cc_time.x;\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\nvec2 pmod(vec2 p, float n){\n  float np = 3.1415*2./n;\n  float r = atan(p.y,p.x)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n}\nfloat cube(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n}\nfloat crossBox(vec3 p,float s){\n  float m1 = cube(p,vec3(s,s,99999.));\n  float m2 = cube(p,vec3(99999.,s,s));\n  float m3 = cube(p,vec3(s,99999.,s));\n  return min(min(m1,m2),m3);\n}\nfloat dist(vec3 p){\n  p.xy *= rot(time*0.2);\n  p.z += time;\n  p.xy = pmod(p.xy,6.);\n  for(int i  =0;i<4;i++){\n    p = abs(p)-1.;\n    p.xz *= rot(0.3);\n  }\n  float k = 0.6;\n  p = mod(p,k)-0.5*k;\n  return min(crossBox(p,0.02),cube(p,vec3(0.1)));\n}\nvoid main () {\n  vec2 p = ( gl_FragCoord.xy / resolution.xy );\np = (p-0.5)*2.;\np.x *= resolution.x/resolution.y;\np *= rot(time*0.0);\nvec3 ro = vec3(cos(time/2.),0.7,0.7);\nvec3 rd = normalize(vec3(p,0.)-ro);\nfloat d,t=2.;\nfloat ac = 0.;\nfor(int i = 0;i<50;i++){\n  d = dist(ro+rd*t);\n  t += d;\n  ac += exp(-4.0*d);\n  if(d<0.01) break;\n}\nfloat cl = exp(-1.0*t);\nvec3 col = vec3(0.7,0.7,0.2)*0.05*vec3(ac);\ncol += vec3(0,0.3,0.3);\ncol = pow(col,vec3(0.7));\nif(d<0.01) col +=vec3(0.4,0.8,0.9)*0.01/abs(mod((ro+rd*t).z,1.0)-0.5);\ngl_FragColor = vec4(col, 1.0 );\n}"
      }
    }
  ],
  "subMetas": {}
}